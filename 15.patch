From 86717b9e4d16c6629a5bd752a4f45ca112284fdd Mon Sep 17 00:00:00 2001
From: Morten Stenshorne <mstensho@chromium.org>
Date: Mon, 25 Feb 2019 07:21:47 +0000
Subject: [PATCH] [LayoutNG] CreateAlgorithmAndRun() must not be inline.

The compiler may choose to inline it, if we don't explicitly forbid it.
Now that the compiler won't inline it, pass the callback by reference,
rather than by value. Otherwise stack usage would actually increase.
Also pass the callback by reference to DetermineAlgorithmAndRun(), since
the compiler may choose NOT to inline it, even if we ask for it to be
inlined.

This saves 196 bytes [*] of stack space per in-flow layout recursion.

[*] Linux 64bit release.

Bug: 930637
Change-Id: If1edb5c75bc82142d1f1d4a1d8521e92abcec374
Reviewed-on: https://chromium-review.googlesource.com/c/1485236
Reviewed-by: Christian Biesinger <cbiesinger@chromium.org>
Reviewed-by: Ian Kilpatrick <ikilpatrick@chromium.org>
Commit-Queue: Morten Stenshorne <mstensho@chromium.org>
Cr-Commit-Position: refs/heads/master@{#635040}
---
 .../blink/renderer/core/layout/ng/ng_block_node.cc       | 9 ++++++---
 1 file changed, 6 insertions(+), 3 deletions(-)

diff --git a/third_party/blink/renderer/core/layout/ng/ng_block_node.cc b/third_party/blink/renderer/core/layout/ng/ng_block_node.cc
index 8812f2151419f..e75681adf06ff 100644
--- a/third_party/blink/renderer/core/layout/ng/ng_block_node.cc
+++ b/third_party/blink/renderer/core/layout/ng/ng_block_node.cc
@@ -66,16 +66,19 @@ struct NGLayoutAlgorithmParams {
   const NGBlockBreakToken* break_token;
 };
 
+// The entire purpose of this function is to avoid allocating space on the stack
+// for all layout algorithms for each node we lay out. Therefore it must not be
+// inline.
 template <typename Algorithm, typename Callback>
-void CreateAlgorithmAndRun(const NGLayoutAlgorithmParams& params,
-                           Callback callback) {
+NOINLINE void CreateAlgorithmAndRun(const NGLayoutAlgorithmParams& params,
+                                    const Callback& callback) {
   Algorithm algorithm(params.node, params.space, params.break_token);
   callback(&algorithm);
 }
 
 inline void DetermineAlgorithmAndRun(
     const NGLayoutAlgorithmParams& params,
-    std::function<void(NGLayoutAlgorithmOperations*)> callback) {
+    const std::function<void(NGLayoutAlgorithmOperations*)>& callback) {
   const ComputedStyle& style = params.node.Style();
   const LayoutBox& box = *params.node.GetLayoutBox();
   if (box.IsLayoutNGFlexibleBox()) {
