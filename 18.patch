From fc12b3a8db3e6fa5359818ac35626868689566de Mon Sep 17 00:00:00 2001
From: Joel Hockey <joelhockey@chromium.org>
Date: Mon, 25 Feb 2019 07:31:07 +0000
Subject: [PATCH] Create externalfile URLs for Crostini files for ARC++.

Handle fuse-based crostini files in the same way
as drivefs.

Bug: 919686
Change-Id: I89d0cfee770adb0ef58b8923a60adbbc8b8016bd
Reviewed-on: https://chromium-review.googlesource.com/c/1484969
Commit-Queue: Naoki Fukino <fukino@chromium.org>
Reviewed-by: Naoki Fukino <fukino@chromium.org>
Reviewed-by: Sam McNally <sammc@chromium.org>
Auto-Submit: Joel Hockey <joelhockey@chromium.org>
Cr-Commit-Position: refs/heads/master@{#635043}
---
 .../file_system_provider_apitest.cc           |  5 ++++
 .../chromeos/file_manager/path_util.cc        | 23 ++++++++++++---
 .../file_manager/path_util_unittest.cc        | 28 ++++++++++++++++---
 .../fileapi/external_file_url_util.cc         | 13 ++++-----
 .../chromeos/fileapi/external_file_url_util.h |  9 +++---
 5 files changed, 58 insertions(+), 20 deletions(-)

diff --git a/chrome/browser/chromeos/extensions/file_system_provider/file_system_provider_apitest.cc b/chrome/browser/chromeos/extensions/file_system_provider/file_system_provider_apitest.cc
index bb7b6c942a87b..dd4654853a2ab 100644
--- a/chrome/browser/chromeos/extensions/file_system_provider/file_system_provider_apitest.cc
+++ b/chrome/browser/chromeos/extensions/file_system_provider/file_system_provider_apitest.cc
@@ -18,6 +18,7 @@
 #include "chrome/browser/chromeos/file_system_provider/request_manager.h"
 #include "chrome/browser/chromeos/file_system_provider/request_value.h"
 #include "chrome/browser/chromeos/file_system_provider/service.h"
+#include "chrome/browser/chromeos/login/users/fake_chrome_user_manager.h"
 #include "chrome/browser/extensions/extension_apitest.h"
 #include "chrome/browser/notifications/notification_display_service_tester.h"
 #include "ui/message_center/public/cpp/notification.h"
@@ -136,11 +137,15 @@ class FileSystemProviderApiTest : public ExtensionApiTest {
 
     display_service_ = std::make_unique<NotificationDisplayServiceTester>(
         browser()->profile());
+
+    user_manager_.AddUser(AccountId::FromUserEmailGaiaId(
+        browser()->profile()->GetProfileUserName(), "12345"));
   }
 
   std::unique_ptr<NotificationDisplayServiceTester> display_service_;
 
  private:
+  chromeos::FakeChromeUserManager user_manager_;
   DISALLOW_COPY_AND_ASSIGN(FileSystemProviderApiTest);
 };
 
diff --git a/chrome/browser/chromeos/file_manager/path_util.cc b/chrome/browser/chromeos/file_manager/path_util.cc
index 21956fb71afb5..c87ae887d19bd 100644
--- a/chrome/browser/chromeos/file_manager/path_util.cc
+++ b/chrome/browser/chromeos/file_manager/path_util.cc
@@ -400,10 +400,25 @@ bool ConvertPathToArcUrl(const base::FilePath& path, GURL* arc_url_out) {
     return true;
   }
 
-  // Convert paths under /special.
-  GURL external_file_url =
-      chromeos::CreateExternalFileURLFromPath(primary_profile, path,
-                                              /* allow_drivefs = */ true);
+  bool force_external = false;
+  // Force external URL for DriveFS and Crostini.
+  drive::DriveIntegrationService* integration_service = nullptr;
+  if (base::FeatureList::IsEnabled(chromeos::features::kDriveFs)) {
+    integration_service =
+        drive::DriveIntegrationServiceFactory::GetForProfile(primary_profile);
+  }
+  if ((integration_service &&
+       integration_service->GetMountPointPath().AppendRelativePath(
+           path, &relative_path)) ||
+      GetCrostiniMountDirectory(primary_profile)
+          .AppendRelativePath(path, &relative_path)) {
+    force_external = true;
+  }
+
+  // Convert paths under /special or other paths forced to use external URL.
+  GURL external_file_url = chromeos::CreateExternalFileURLFromPath(
+      primary_profile, path, force_external);
+
   if (!external_file_url.is_empty()) {
     *arc_url_out = arc::EncodeToChromeContentProviderUrl(external_file_url);
     return true;
diff --git a/chrome/browser/chromeos/file_manager/path_util_unittest.cc b/chrome/browser/chromeos/file_manager/path_util_unittest.cc
index d6f3da0157b44..bd9595cb367ba 100644
--- a/chrome/browser/chromeos/file_manager/path_util_unittest.cc
+++ b/chrome/browser/chromeos/file_manager/path_util_unittest.cc
@@ -702,11 +702,20 @@ class FileManagerPathUtilConvertUrlTest : public testing::Test {
     ASSERT_TRUE(fake_file_system_.InitCalled());
 
     // Add a drive mount point for the primary profile.
+    storage::ExternalMountPoints* mount_points =
+        storage::ExternalMountPoints::GetSystemInstance();
     drive_mount_point_ = drive::util::GetDriveMountPointPath(primary_profile);
-    const std::string mount_name = drive_mount_point_.BaseName().AsUTF8Unsafe();
-    storage::ExternalMountPoints::GetSystemInstance()->RegisterFileSystem(
-        mount_name, storage::kFileSystemTypeDrive,
-        storage::FileSystemMountOption(), drive_mount_point_);
+    mount_points->RegisterFileSystem(
+        drive_mount_point_.BaseName().AsUTF8Unsafe(),
+        storage::kFileSystemTypeDrive, storage::FileSystemMountOption(),
+        drive_mount_point_);
+
+    // Add a crostini mount point for the primary profile.
+    crostini_mount_point_ = GetCrostiniMountDirectory(primary_profile);
+    mount_points->RegisterFileSystem(GetCrostiniMountPointName(primary_profile),
+                                     storage::kFileSystemTypeNativeLocal,
+                                     storage::FileSystemMountOption(),
+                                     crostini_mount_point_);
   }
 
   void TearDown() override {
@@ -726,6 +735,7 @@ class FileManagerPathUtilConvertUrlTest : public testing::Test {
   std::unique_ptr<user_manager::ScopedUserManager> user_manager_enabler_;
   std::unique_ptr<arc::ArcServiceManager> arc_service_manager_;
   base::FilePath drive_mount_point_;
+  base::FilePath crostini_mount_point_;
 
  private:
   DISALLOW_COPY_AND_ASSIGN(FileManagerPathUtilConvertUrlTest);
@@ -787,6 +797,16 @@ TEST_F(FileManagerPathUtilConvertUrlTest,
   EXPECT_FALSE(ConvertPathToArcUrl(downloads2.AppendASCII("a/b/c"), &url));
 }
 
+TEST_F(FileManagerPathUtilConvertUrlTest, ConvertPathToArcUrl_Crostini) {
+  GURL url;
+  EXPECT_TRUE(
+      ConvertPathToArcUrl(crostini_mount_point_.AppendASCII("a/b/c"), &url));
+  EXPECT_EQ(GURL("content://org.chromium.arc.chromecontentprovider/"
+                 "externalfile%3A"
+                 "crostini_user%40gmail.com-hash_termina_penguin%2Fa%2Fb%2Fc"),
+            url);
+}
+
 TEST_F(FileManagerPathUtilConvertUrlTest, ConvertPathToArcUrl_Special) {
   GURL url;
   EXPECT_TRUE(
diff --git a/chrome/browser/chromeos/fileapi/external_file_url_util.cc b/chrome/browser/chromeos/fileapi/external_file_url_util.cc
index c71ee94a20cbf..d2354cdf2ccdc 100644
--- a/chrome/browser/chromeos/fileapi/external_file_url_util.cc
+++ b/chrome/browser/chromeos/fileapi/external_file_url_util.cc
@@ -24,19 +24,18 @@ using content::BrowserThread;
 
 namespace chromeos {
 
-bool IsExternalFileURLType(storage::FileSystemType type, bool allow_drivefs) {
+bool IsExternalFileURLType(storage::FileSystemType type, bool force) {
   return type == storage::kFileSystemTypeDrive ||
          type == storage::kFileSystemTypeDeviceMediaAsFileStorage ||
          type == storage::kFileSystemTypeProvided ||
-         type == storage::kFileSystemTypeArcContent ||
-         (allow_drivefs && type == storage::kFileSystemTypeDriveFs);
+         type == storage::kFileSystemTypeArcContent || force;
 }
 
 GURL FileSystemURLToExternalFileURL(
     const storage::FileSystemURL& file_system_url,
-    bool allow_drivefs) {
+    bool force) {
   if (file_system_url.mount_type() != storage::kFileSystemTypeExternal ||
-      !IsExternalFileURLType(file_system_url.type(), allow_drivefs)) {
+      !IsExternalFileURLType(file_system_url.type(), force)) {
     return GURL();
   }
 
@@ -59,7 +58,7 @@ GURL VirtualPathToExternalFileURL(const base::FilePath& virtual_path) {
 
 GURL CreateExternalFileURLFromPath(Profile* profile,
                                    const base::FilePath& path,
-                                   bool allow_drivefs) {
+                                   bool force) {
   DCHECK_CURRENTLY_ON(BrowserThread::UI);
 
   GURL raw_file_system_url;
@@ -78,7 +77,7 @@ GURL CreateExternalFileURLFromPath(Profile* profile,
   if (!file_system_url.is_valid())
     return GURL();
 
-  return FileSystemURLToExternalFileURL(file_system_url, allow_drivefs);
+  return FileSystemURLToExternalFileURL(file_system_url, force);
 }
 
 }  // namespace chromeos
diff --git a/chrome/browser/chromeos/fileapi/external_file_url_util.h b/chrome/browser/chromeos/fileapi/external_file_url_util.h
index 9bb60608f1446..dc2ab209b1637 100644
--- a/chrome/browser/chromeos/fileapi/external_file_url_util.h
+++ b/chrome/browser/chromeos/fileapi/external_file_url_util.h
@@ -22,17 +22,16 @@ class FileSystemURL;
 namespace chromeos {
 
 // Returns whether the external file URL is provided for the |type| or not.
-// TODO(b/119597913): Remove |allow_drivefs| from all functions in this file
+// TODO(b/119597913): Remove |force| from all functions in this file
 // once ARC++ can access FUSE-mounted filesystems directly.
-bool IsExternalFileURLType(storage::FileSystemType type,
-                           bool allow_drivefs = false);
+bool IsExternalFileURLType(storage::FileSystemType type, bool force = false);
 
 // Obtains the external file url formatted as "externalfile:<path>" from file
 // path. Returns empty URL if the file system does not provide the external file
 // URL.
 GURL FileSystemURLToExternalFileURL(
     const storage::FileSystemURL& file_system_url,
-    bool allow_drivefs = false);
+    bool force = false);
 
 // Converts a externalfile: URL back to a virtual path of FileSystemURL.
 base::FilePath ExternalFileURLToVirtualPath(const GURL& url);
@@ -45,7 +44,7 @@ GURL VirtualPathToExternalFileURL(const base::FilePath& virtual_path);
 // external location (drive, MTP, or FSP). Otherwise, it returns empty URL.
 GURL CreateExternalFileURLFromPath(Profile* profile,
                                    const base::FilePath& path,
-                                   bool allow_drivefs = false);
+                                   bool force = false);
 
 }  // namespace chromeos
 
